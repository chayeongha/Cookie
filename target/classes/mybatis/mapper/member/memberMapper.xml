<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.cookie.basic.member.MemberMapper">
  
  	<!--회원가입  -->
  	<insert id="memberJoin" parameterType="MemberVO" useGeneratedKeys="true" keyProperty="memNum">
  			insert into members values (null,#{memId},#{pw},#{name},#{nickname},#{phone},#{email},#{grade},#{kind})
  	</insert>

  	<!--로그인 resultmap  -->
  	<resultMap type="MemberVO" id="MemberLogin">
  			<id column="memNum" property="memNum"/>
  			<result column="memId" property="memId"/>
  			<result column="pw" property="pw"/>
  			<result column="name" property="name"/>
  			<result column="nickname" property="nickname"/>
  			<result column="phone" property="phone"/>
  			<result column="email" property="email"/>
  			<result column="grade" property="grade"/>
  			<result column="kind" property="kind"/>
  		<association property="memberFilesVO" javaType="memberFilesVO">
  			<id column="fnum" property="fnum"/>
  			<result column="fname" property="fname"/>
  			<result column="oname" property="oname"/>
  		</association>
  	</resultMap>
  	
  	<!--로그인  -->
  	<select id= "memberLogin" parameterType="MemberVO" resultMap="MemberLogin">
  			select M.*,F.* from members M left join memberFiles F
			on M.memNum=F.memNum
 			where M.memId=#{memId} and M.pw=#{pw}
			union
			select M.*,F.* from members M right join memberFiles F
			on M.memNum=F.memNum
			where M.memId=#{memId} and M.pw=#{pw}		
   	</select>
   	
   	<!--아이디중복검사 -->
   	<select id="idCheck" parameterType="MemberVO" resultType="MemberVO">
   			select memId from members where memId=#{memId}
   	</select>
   	
   	<!--닉네임중복검사  -->
   	<select id="nickCheck" parameterType="MemberVO" resultType="MemberVO">
   			select nickname from members where nickname=#{nickname}
   	</select>
   	
   	<!--이메일중복검사  -->
   	<select id="emailCheck" parameterType="MemberVO" resultType="MemberVO">
   			select email from members where email=#{email}
   	</select>
   	
   	<!--연락처중복검사  -->
   	<select id="phoneCheck" parameterType="MemberVO" resultType="MemberVO">
   			select phone from members where phone=#{phone}
   	</select>
   	
   	<!--연락처중복검사2  -->
   	<select id="phoneCheck2" parameterType="MemberVO" resultType="MemberVO">
   			select phone from members where phone=#{phone}
   	</select>
   	
   	<!--회원정보 수정 -->
   	<update id="memberUpdate" parameterType="MemberVO">
   			update members set pw=#{pw}, name=#{name}, nickname=#{nickname}, phone=#{phone}, email=#{email}
   			where memNum=#{memNum}
   	</update>
   	
   	<!--마이페이지에서 회원 스스로 탈퇴  -->
   	<delete id="memberDelete" parameterType="MemberVO">
   			delete from members where nickname=#{nickname}
   	</delete>
	
	<!-- 카카오 회원가입-->
  	<insert id="kakaoJoin" parameterType="MemberVO">
  		insert into members values(null,#{memId},null,#{nickname},#{nickname},'000-0000-0000',#{email},1,2)
  	</insert>

  	<!-- 카카오 -->
  	<select id="memberKakao" parameterType="MemberVO" resultType="MemberVO">
  		select * from members where memId=#{memId} and kind=2
  	</select>
  
  	<!-- 네이버 회원가입-->
  	<insert id="naverJoin" parameterType="MemberVO">
  		insert into members values(null,#{memId},null,#{name},#{nickname},'000-0000-0000',#{email},1,1)
  	</insert>
  
  	<!-- 네이버 -->
  	<select id="memberNaver" parameterType="MemberVO" resultType="MemberVO">
  		select * from members where memId=#{memId} and kind=1
  	</select>
	
	<!--아이디찾기: 입력한 이름과 휴대폰번호가 같은지 -->
	<select id="idSearch" parameterType="MemberVO" resultType="MemberVO">
		select * from members where name=#{name} and phone=#{phone}		
	</select>	
	
	<!--아이디찾기: 문자인증완료후 아이디 나오는거 -->
	<select id="findId" parameterType="MemberVO" resultType="String">
		select memId from members where phone =#{phone} and name=#{name}
	</select>
	
	<!--패스워드찾기: 입력한 아이디와 이메일이 같은지 -->
	<select id="pwSearch" parameterType="MemberVO" resultType="MemberVO">
		select * from members where memId=#{memId} and email=#{email}
	</select>
	
	<!--패스워드찾기: 임시번호를  아이디와 이메일이 같은 회원의 비밀번호로 업데이트시켜준다. -->
	<update id="pwUpdate" parameterType="MemberVO">
		update members set pw=#{pw} where memId=#{memId} and email=#{email}
	</update>
	
	<!--스토어미니리스트 resultmap  -->
  	<resultMap type="StoreVO" id="sMiniList">
  			<id column="ssNum" property="ssNum"/>
  			<result column="sName" property="sName"/>
  			<result column="sTel" property="sTel"/>
  			<result column="roadFullAddr" property="roadFullAddr"/>
  			<result column="memId" property="memId"/>
  			<result column="sNotice" property="sNotice"/>
  			<result column="sOn" property="sOn"/>
  			<result column="memNum" property="memNum"/>
  		<association property="storeFilesVO" javaType="storeFilesVO">
  			<id column="fNum" property="fNum"/>
  			<result column="fName" property="fName"/>
  			<result column="oName" property="oName"/>
  		</association>
  	</resultMap>
	
	<!--마이페이지 스토어소개 -->
	<select id="sMiniList" parameterType="StoreVO" resultMap="sMiniList">
		select S.*,F.* from store S left join storeFiles F
			on S.ssNum=F.ssNum
 			where S.sOn=1
			union
			select S.*,F.* from store S right join storeFiles F
			on S.ssNum=F.ssNum
			where S.sOn=1
	</select>
	
	
</mapper>